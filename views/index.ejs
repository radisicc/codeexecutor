<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Daytona Code Executor</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body {
      padding-top: 2rem;
      padding-bottom: 2rem;
    }
    .code-editor {
      font-family: monospace;
      min-height: 300px;
      width: 100%;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 4px;
    }
    .result-container {
      margin-top: 20px;
      padding: 15px;
      border-radius: 4px;
    }
    .success {
      background-color: #d4edda;
      border-color: #c3e6cb;
    }
    .error {
      background-color: #f8d7da;
      border-color: #f5c6cb;
    }
    .output {
      white-space: pre-wrap;
      font-family: monospace;
      padding: 10px;
      background-color: #f8f9fa;
      border-radius: 4px;
      margin-top: 10px;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1 class="mb-4">Daytona Code Executor</h1>
    
    <div class="card mb-4">
      <div class="card-body">
        <h5 class="card-title">What is this tool?</h5>
        <p class="card-text">
          The Daytona Code Executor is a secure cloud-based code execution environment. It allows you to:
        </p>
        <ul>
          <li><strong>Run code securely</strong> in isolated sandboxes without installing anything locally</li>
          <li><strong>Execute code in multiple languages</strong> including TypeScript, JavaScript, and Python</li>
          <li><strong>Maintain session state</strong> across multiple executions</li>
          <li><strong>Get immediate results</strong> with detailed output and error information</li>
        </ul>
        <p class="card-text">
          Simply select your preferred language, enter your code, and click "Execute Code" to see the results.
          When you're finished, click "Clean Up Session" to remove the sandbox.
        </p>
      </div>
    </div>
    
    <form action="/execute" method="POST" enctype="multipart/form-data">
      <% if (locals.sessionId) { %>
        <input type="hidden" name="sessionId" value="<%= sessionId %>">
      <% } %>
      
      <div class="mb-3">
        <label for="language" class="form-label">Select Language:</label>
        <select class="form-select" id="language" name="language">
          <% supportedLanguages.forEach(lang => { %>
            <option value="<%= lang %>" <%= locals.language === lang ? 'selected' : '' %>><%= lang.charAt(0).toUpperCase() + lang.slice(1) %></option>
          <% }); %>
        </select>
      </div>
      
      <div class="mb-3">
        <label for="code" class="form-label">Your Code:</label>
        <textarea class="code-editor" id="code" name="code" required><%= locals.code || '' %></textarea>
      </div>
      
      <div class="mb-3">
        <label for="files" class="form-label">Upload Files (Optional):</label>
        <input type="file" class="form-control" id="files" name="files" multiple>
        <div class="form-text">You can upload up to 5 files that your code can access.</div>
      </div>
      
      <div class="mb-3 d-flex gap-2">
        <button type="submit" class="btn btn-primary">Execute Code</button>
        
        <% if (locals.sessionId) { %>
          <button type="button" class="btn btn-danger" onclick="cleanupSession('<%= sessionId %>')">Clean Up Session</button>
        <% } %>
      </div>
      
      <div class="mb-3">
        <div class="card">
          <div class="card-header">
            AI Code Analysis
          </div>
          <div class="card-body">
            <p class="card-text">Use AI to analyze your code:</p>
            <div class="d-flex gap-2">
              <button type="button" class="btn btn-outline-primary" onclick="analyzeCode('optimize')">Optimize Code</button>
              <button type="button" class="btn btn-outline-info" onclick="analyzeCode('explain')">Explain Code</button>
              <button type="button" class="btn btn-outline-secondary" onclick="analyzeCode('review')">Code Review</button>
            </div>
          </div>
        </div>
      </div>
    </form>
    
    <% if (locals.uploadedFiles && uploadedFiles.length > 0) { %>
      <div class="card mb-4 mt-4">
        <div class="card-body">
          <h5 class="card-title">Uploaded Files</h5>
          <p class="card-text">These files are available in your workspace:</p>
          <ul>
            <% uploadedFiles.forEach(file => { %>
              <li><code><%= file %></code></li>
            <% }); %>
          </ul>
          <p class="card-text text-muted">You can access these files in your code using relative paths.</p>
        </div>
      </div>
    <% } %>

    <% if (locals.result) { %>
      <div class="result-container <%= result.success ? 'success' : 'error' %>">
        <h3><%= result.success ? 'Execution Successful' : 'Execution Failed' %></h3>
        <p>Exit Code: <%= result.exitCode %></p>
        <h4>Output:</h4>
        <div class="output"><%= result.result %></div>
      </div>
    <% } %>
  </div>
  
  <!-- Modal for AI Analysis Results -->
  <div class="modal fade" id="aiResultModal" tabindex="-1" aria-labelledby="aiResultModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="aiResultModalLabel">AI Analysis</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div id="loadingSpinner" class="text-center">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
            <p>Processing your code with AI...</p>
          </div>
          <div id="aiResult" class="d-none">
            <pre id="aiResultContent" class="p-3 border rounded bg-light" style="white-space: pre-wrap;"></pre>
          </div>
          <div id="aiError" class="d-none">
            <div class="alert alert-danger" role="alert">
              <h4 class="alert-heading">Error</h4>
              <p id="aiErrorMessage"></p>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          <button type="button" class="btn btn-primary" id="useSuggestionBtn" onclick="useAiSuggestion()" disabled>Use This Code</button>
        </div>
      </div>
    </div>
  </div>
  
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // Initialize Bootstrap components
    document.addEventListener('DOMContentLoaded', function() {
      // Any initialization code here
    });
    
    // Clean up session
    function cleanupSession(sessionId) {
      fetch('/cleanup', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ sessionId })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          alert('Session cleaned up successfully');
          window.location.href = '/';
        } else {
          alert('Failed to clean up session: ' + data.message);
        }
      })
      .catch(error => {
        console.error('Error:', error);
        alert('An error occurred while cleaning up the session');
      });
    }
    
    // AI code analysis
    let currentAiResult = '';
    
    function analyzeCode(action) {
      const code = document.getElementById('code').value;
      if (!code) {
        alert('Please enter some code first.');
        return;
      }
      
      const language = document.getElementById('language').value;
      
      // Reset and show modal
      document.getElementById('loadingSpinner').classList.remove('d-none');
      document.getElementById('aiResult').classList.add('d-none');
      document.getElementById('aiError').classList.add('d-none');
      document.getElementById('useSuggestionBtn').disabled = true;
      
      const aiResultModal = new bootstrap.Modal(document.getElementById('aiResultModal'));
      aiResultModal.show();
      
      // Call the API
      fetch('/analyze-code', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ code, language, action })
      })
      .then(response => response.json())
      .then(data => {
        document.getElementById('loadingSpinner').classList.add('d-none');
        
        if (data.success) {
          document.getElementById('aiResult').classList.remove('d-none');
          document.getElementById('aiResultContent').textContent = data.result;
          currentAiResult = data.result;
          
          // Only enable the "Use This Code" button for optimize action
          if (action === 'optimize') {
            document.getElementById('useSuggestionBtn').disabled = false;
          }
        } else {
          document.getElementById('aiError').classList.remove('d-none');
          document.getElementById('aiErrorMessage').textContent = data.message;
        }
      })
      .catch(error => {
        document.getElementById('loadingSpinner').classList.add('d-none');
        document.getElementById('aiError').classList.remove('d-none');
        document.getElementById('aiErrorMessage').textContent = error.message;
      });
    }
    
    function useAiSuggestion() {
      if (currentAiResult) {
        // Extract code from markdown if present
        let codeToUse = currentAiResult;
        const codeBlockMatch = currentAiResult.match(/```[\w]*\n([\s\S]*?)```/);
        if (codeBlockMatch && codeBlockMatch[1]) {
          codeToUse = codeBlockMatch[1];
        }
        
        document.getElementById('code').value = codeToUse;
        
        // Close the modal
        const modalElement = document.getElementById('aiResultModal');
        const modal = bootstrap.Modal.getInstance(modalElement);
        modal.hide();
      }
    }
  </script>
</body>
</html>